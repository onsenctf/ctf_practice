from Crypto.Util.number import *
import gmpy2

n = 573705313470237088128697724011345537729683894813773026784491075891375787623474876644061916906451471924722277144379030941570465205946833957200688304499122972757670018621482568140886956686009200092360197152239823056384412058625497863977546406937961142478700220534582896797390680947594209881481624425897931034297127910081669705880067174821720273642918776110649889916889528110735095592416817545242751005238512957101272680451113761426278203742295886722523975429342004312924930404678014280113729314434769051596435530057776346632601974236264442330943600999709043920136852080203441976582246277392355669576484507651557516413526616046 // 2
ciphertext = 179299686848994539141122382962230037744384497621603198124077003991636319769603564062817092353600906591207476251327282277695110268704615120068654776183507204512702766847930125900500659983050185274344899025779726523565280032908194763356944549824963215339419038543390439655210741510143003582737996617770895692162306286064421718892797213765237300926925675153074894532935937291295802157305724856321584517131226940140190491157709894421683196766707672593154406263054436900566231464719102312973247466510418770039194000878897515838985623461176782628261365771619698859295767451162504151010728056594695117040661023327968023451519804564

def fermat_factors(n):
    assert n % 2 != 0
    x = gmpy2.isqrt(n)
    y2 = x**2 - n
    while not gmpy2.is_square(y2):
        x += 1
        y2 = x**2 - n
    factor1 = x + gmpy2.isqrt(y2)  # a = x + y
    factor2 = x - gmpy2.isqrt(y2)  # b = x - y
    return int(factor1), int(factor2)

p_, q_ = fermat_factors(n*1337*7331)

p, q = (p_ // 1337, q_ // 7331) if isPrime(p_ // 1337) else (p_ // 7331, q_ //1337)

print(long_to_bytes(int(pow(ciphertext, pow(65537, -1, (p-1)*(q-1)), n))))

# => b'L3AK{All_H4Il_tH3_Gr3At_C0Pp3rsm1TH!!}'
